import pyautogui
import keyboard
import time
import threading
import tkinter as tk
from tkinter import filedialog, ttk
import json
import cv2
import pytesseract
import numpy as np
from PIL import ImageGrab

# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á pytesseract ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏á Tesseract-OCR ‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢)
# pip install pytesseract pillow opencv-python

positions = []          # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å)
task_sequence = [       # ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏á‡∏≤‡∏ô (‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô)
    "‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û",
    "‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ OCR",
    "‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"
]
running = False         # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏≠‡∏ó
bot_thread = None       # Thread ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó
target_images = []      # ‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
target_texts = []       # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö (OCR)
interval = 2            # ‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏ö‡∏á‡∏≤‡∏ô

# ======================
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏≠‡∏ó
# ======================
def click_loop():
    global running
    pos_index = 0
    while running:
        # ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        for task in task_sequence:
            if task == "‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û":
                for img in target_images:
                    box = pyautogui.locateOnScreen(img, confidence=0.8)
                    if box:
                        center = pyautogui.center(box)
                        pyautogui.doubleClick(center)
                        log(f"[‡∏†‡∏≤‡∏û‡πÄ‡∏à‡∏≠] ‡∏î‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡πâ‡∏•‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà {center}")
                        # ‡∏´‡∏≤‡∏Å‡πÄ‡∏à‡∏≠‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop ‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                        break
            elif task == "‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ OCR":
                screen = ImageGrab.grab()
                img_np = np.array(screen)
                gray = cv2.cvtColor(img_np, cv2.COLOR_BGR2GRAY)
                detected_text = pytesseract.image_to_string(gray, lang="eng+tha")
                for keyword in target_texts:
                    if keyword in detected_text:
                        w, h = pyautogui.size()
                        pyautogui.doubleClick(w//2, h//2)
                        log(f"[OCR ‡πÄ‡∏à‡∏≠] '{keyword}' ‚Üí ‡∏î‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡πâ‡∏•‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≠")
                        break
            elif task == "‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á":
                if positions:
                    x, y = positions[pos_index]
                    pyautogui.doubleClick(x, y)
                    log(f"[‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å] ‡∏•‡∏≥‡∏î‡∏±‡∏ö {pos_index+1} ‚Üí ({x}, {y})")
                    pos_index = (pos_index + 1) % len(positions)
        time.sleep(interval)

def start_bot():
    global running, bot_thread
    if running:
        log("‚ö†Ô∏è ‡∏ö‡∏≠‡∏ó‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
        return
    running = True
    bot_thread = threading.Thread(target=click_loop, daemon=True)
    bot_thread.start()
    log("‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏≠‡∏ó")

def stop_bot():
    global running
    running = False
    log("‚õî ‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏≠‡∏ó‡πÅ‡∏•‡πâ‡∏ß")

# ======================
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á/‡∏£‡∏π‡∏õ/‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°/‡∏á‡∏≤‡∏ô
# ======================
def add_position():
    x, y = pyautogui.position()
    positions.append((x, y))
    update_lists()
    log(f"‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ({x}, {y})")

def remove_last():
    if positions:
        pos = positions.pop()
        update_lists()
        log(f"üóëÔ∏è ‡∏•‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: {pos}")
    else:
        log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡πâ‡∏•‡∏ö")

def choose_image():
    file_path = filedialog.askopenfilename(filetypes=[("PNG Images", "*.png"), ("All Files", "*.*")])
    if file_path:
        target_images.append(file_path)
        update_lists()
        log(f"üñºÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {file_path}")

def add_text():
    text = entry_text.get()
    if text:
        target_texts.append(text)
        update_lists()
        log(f"üî§ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR: {text}")

def remove_task():
    # ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å task_sequence
    try:
        selected_index = listbox_tasks.curselection()[0]
        removed = task_sequence.pop(selected_index)
        update_lists()
        log(f"üóëÔ∏è ‡∏•‡∏ö‡∏á‡∏≤‡∏ô: {removed}")
    except IndexError:
        log("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö")

def save_config():
    data = {
        "positions": positions,
        "images": target_images,
        "texts": target_texts,
        "tasks": task_sequence,
        "interval": interval
    }
    file_path = filedialog.asksaveasfilename(defaultextension=".json", filetypes=[("JSON", "*.json")])
    if file_path:
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
        log(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å config: {file_path}")

def load_config():
    global positions, target_images, target_texts, task_sequence, interval
    file_path = filedialog.askopenfilename(filetypes=[("JSON", "*.json")])
    if file_path:
        with open(file_path, "r", encoding="utf-8") as f:
            data = json.load(f)
        positions = data.get("positions", [])
        target_images = data.get("images", [])
        target_texts = data.get("texts", [])
        task_sequence = data.get("tasks", ["‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û", "‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ OCR", "‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"])
        interval = data.get("interval", 2)
        entry_interval.delete(0, tk.END)
        entry_interval.insert(0, str(interval))
        update_lists()
        log(f"üìÇ ‡πÇ‡∏´‡∏•‡∏î config: {file_path}")

# ======================
# GUI
# ======================
def update_lists():
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï listbox ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å"
    listbox_positions.delete(0, tk.END)
    if positions:
        listbox_positions.insert(tk.END, "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:")
        for idx, (x, y) in enumerate(positions, start=1):
            listbox_positions.insert(tk.END, f" - {idx}. ({x}, {y})")
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï listbox ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ "‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏á‡∏≤‡∏ô"
    listbox_tasks.delete(0, tk.END)
    if task_sequence:
        listbox_tasks.insert(tk.END, "‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏á‡∏≤‡∏ô:")
        for idx, task in enumerate(task_sequence, start=1):
            listbox_tasks.insert(tk.END, f" - {idx}. {task}")

def log(msg):
    text_log.insert(tk.END, msg + "\n")
    text_log.see(tk.END)

def set_interval():
    global interval
    try:
        interval = float(entry_interval.get())
        log(f"‚è±Ô∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ interval: {interval} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    except ValueError:
        log("‚ö†Ô∏è ‡∏Ñ‡πà‡∏≤ interval ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

def on_close():
    stop_bot()
    root.destroy()

root = tk.Tk()
root.title("Bot Auto Click + Image + OCR")
root.geometry("500x650")
root.protocol("WM_DELETE_WINDOW", on_close)

# ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á/‡∏£‡∏π‡∏õ/‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
frame_buttons = ttk.Frame(root)
frame_buttons.pack(pady=10)

ttk.Button(frame_buttons, text="‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (F7)", command=add_position).grid(row=0, column=0, padx=5)
ttk.Button(frame_buttons, text="üóëÔ∏è ‡∏•‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", command=remove_last).grid(row=0, column=1, padx=5)
ttk.Button(frame_buttons, text="üñºÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", command=choose_image).grid(row=1, column=0, padx=5, pady=5)
ttk.Button(frame_buttons, text="üî§ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", command=add_text).grid(row=1, column=1, padx=5, pady=5)

# ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° OCR
entry_text = ttk.Entry(root, width=40)
entry_text.pack(pady=5)

# Interval
frame_interval = ttk.Frame(root)
frame_interval.pack(pady=5)
ttk.Label(frame_interval, text="Interval (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ):").grid(row=0, column=0, padx=5)
entry_interval = ttk.Entry(frame_interval, width=10)
entry_interval.insert(0, str(interval))
entry_interval.grid(row=0, column=1, padx=5)
ttk.Button(frame_interval, text="Set", command=set_interval).grid(row=0, column=2, padx=5)

# ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏≠‡∏ó
frame_bot = ttk.Frame(root)
frame_bot.pack(pady=5)
ttk.Button(frame_bot, text="‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏ó", command=start_bot).grid(row=0, column=0, padx=5)
ttk.Button(frame_bot, text="‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏ö‡∏≠‡∏ó (F6)", command=stop_bot).grid(row=0, column=1, padx=5)

# ‡∏õ‡∏∏‡πà‡∏° Save/Load
frame_save = ttk.Frame(root)
frame_save.pack(pady=5)
ttk.Button(frame_save, text="üíæ Save Config", command=save_config).grid(row=0, column=0, padx=5)
ttk.Button(frame_save, text="üìÇ Load Config", command=load_config).grid(row=0, column=1, padx=5)

# Notebook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏¢‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
notebook = ttk.Notebook(root)
notebook.pack(fill='both', expand=True, padx=10, pady=10)

# Tab ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å
tab_positions = ttk.Frame(notebook)
notebook.add(tab_positions, text="‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å")

listbox_positions = tk.Listbox(tab_positions, width=60, height=10)
listbox_positions.pack(pady=10)

# Tab ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏á‡∏≤‡∏ô
tab_tasks = ttk.Frame(notebook)
notebook.add(tab_tasks, text="‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏á‡∏≤‡∏ô")

listbox_tasks = tk.Listbox(tab_tasks, width=60, height=10)
listbox_tasks.pack(pady=10)
ttk.Button(tab_tasks, text="üóëÔ∏è ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", command=remove_task).pack(pady=5)

# Log
text_log = tk.Text(root, height=15, width=60)
text_log.pack(pady=5)

# Hotkey
keyboard.add_hotkey("F7", add_position)
keyboard.add_hotkey("F6", stop_bot)

update_lists()
root.mainloop()
